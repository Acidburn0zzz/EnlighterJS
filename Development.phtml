<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	
	<!-- Favicon !-->
	<link rel="icon" href="Resources/favicon.png" type="image/png" />
	
	<title>EnlighterJS Playground</title>
	
	<!-- Bootstrap CSS - just 4 styling ;)  -->
	<link rel="stylesheet" href="Resources/bootstrap/bootstrap.min.css" />

	<!-- EnlighterJS Styles -->
<?php 
    require('Util/global.php');

$theme = 'eclipse';

	foreach ($sources->css as $css){
		echo '<link rel="stylesheet" href="', $css, '" />', "\n";
	}
?>	
	
	<!-- Include MooTools Framework -->
	<script type="text/javascript" src="Resources/MooTools.min.js"></script>
	

	<script type="text/javascript">
		// attention: don't use load or domready here! the jsloaded event is triggered by DynamicSourcefileLoader
		window.addEvent('domready', function(){
			
			var options = {
					language : 'js',
					theme: 'godzilla',
					rawButton: true,
					windowButton: true,
					indent : 2,
					infoButton: true,
					showLinenumbers: true
			};
	
			//document.getElements('pre.special').enlight(options);
	
			//document.id('NoLight').enlight(true).enlight(false);
		EnlighterJS.Util.Init('pre', 'code', options);
		/*
			EnlighterJS.Util.Helper(document.getElements('pre.special'), Object.merge(options,{
				renderer : 'Block',
			}));
			
			EnlighterJS.Util.Helper(document.getElements('code.special'), Object.merge(options,{
				renderer : 'Inline',
			}));
	*/

		});
	</script>
</head>

<body>
	<!-- Begin page content -->
	<div class="container">

			<h1>
				<strong>EnlighterJS</strong> <small>Development Playground</small>
			</h1>

		<div id="content">
			<!-- ############################################################# -->

            <p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor
                <code data-enlighter-language="asm">MOV PSW,#107H ; register bank N</code> invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet.
            </p>

<pre data-enlighter-language="lua">


-- This is a comment
print "Hello World!"


--[[Comments can be spread
across several lines ]]
print "Hello World!"


---[[The long handled doubleshovel means that this code will run
print "This will print because it is not a comment!"
-- We can still include comments by prefixing them with a doubledash
-- print "This will not print because it is commented out"
]]

t = {} -- Erzeugt eine leere Tabelle und weist sie der Variablen mit dem Namen t zu.
t = {"yes", "no", "?"} -- Eine Tabelle mit 3 Elementen wobei t[1] = "yes".
t = { [1] = "yes", [2] = "no", [3] = "?" } -- Wie Zeile vorher,
-- nur mit expliziter Indizierung.
t = {[-900] = 3, [900] = 4} -- Tabelle mit 2 Elementen aber unregelmäßigen Indizes.
t = {x=5, y=10} -- Typisches assoziatives Datenfeld mit t["x"], t["y"] (oder t.x, t.y)
t = {x=5, y=10; "yes", "no"} -- Gemischte Tabelle mit t.x, t.y, t[1], t[2]
t = {msg = "choice", {"yes", "no", "?"}} -- Tabellen können ebenfalls Tabellen enthalten.


                            a = 5
b = "hi"
local a = a
-- Einfache Zuweisungen. Variablen sind nicht typisiert und können verschiedene Datentypen haben.
-- Lokale Variablen (definiert mit "local") sind auf den aktuellen Namensbereich beschränkt.
a, b, c = 1, 2, 3 -- Mehrfachzuweisungen sind erlaubt.
a, b = b, a -- Wertetausch: Anweisungen werden von rechts nach links ausgewertet.
a, b = 4, 5, "6" -- Überflüssige Werte (Bsp: "6") werden ausgewertet, aber verworfen.
a, b = "there" -- Fehlende Werte auf der rechten Seite werden mit "nil" ersetzt.
a = nil -- Zerstört a. Der Speicherbereich von a wird vom Garbage-Collector freigegeben.
a = z -- Falls z nicht definiert ist, wird "nil" zugewiesen und somit a freigegeben.
a = "3" + "2" -- Der Operator + erwartet Zahlen, die Zeichenketten werden also
              -- in Zahlen konvertiert, also erfolgt hier die Zuweisung a = 5.
a = 3 .. 2 -- Der Verbindungsoperator erwartet Zeichenketten, die Zahlen werden
           -- konvertiert - a = "32".


                            function probe(zahl1, zahl2, text, tabelle)
   zahl3 = zahl1+zahl2
   zahl4 = zahl1-zahl2

   print(text)

   if tabelle ~= nil then
      print(tabelle.eintrag)
   end

   return zahl3,zahl4
end

probe(10, 20, "Hallo ", {eintrag = "Welt"} ) -- erlaubter Funktionsaufruf

x,y = probe(10,20) -- ebenfalls erlaubter Aufruf, text und tabelle sind nil.
</pre>




		<!-- ############################################################# -->
		</div>
		<!-- // content -->


	</div>
	<!-- // container -->

	<!-- Sticky Footer Message -->
	<div id="footer">
		<div class="container">
			<p class="">
				<strong>EnlighterJS</strong> is developed by <a href="http://andidittrich.de">Andi Dittrich</a><br /> <a href="https://github.com/AndiDittrich/EnlighterJS/archive/master.zip">Download</a> EnlighterJS on <a href="https://github.com/AndiDittrich/EnlighterJS">GitHub</a> | It's released under the Terms of <a href="../LICENSE.md">MIT X11 License</a> | Demo created with <a href="http://getbootstrap.com">Bootstrap</a>
			</p>
		</div>
	</div>
	<!-- // Sticky Footer Message -->

    <!-- EnlighterJS Sourcefiles -->
    <script type="text/javascript">/* <![CDATA[ */
        (function(){
            'use strict';
        <?php
       foreach ($sources->js as $js){
           $x = file_get_contents($js);
           echo preg_replace('#^/\*[\s\S]+\*/#Ui', '', $x);
       }
       ?>
        })();
        /* ]]> */</script>

</body>
</html>